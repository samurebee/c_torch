#CMake uses a configuration file called CMakeLists.txt
#a. Define your project in CMakeLists.txt
#b. Run CMake to create the Makefile
#c. Build your project using Make 
#d. Add code, fix things, etc then jumps to step c
#e. if you add new files or alter the dependecies then jump to step a 

#run g++ --version to find minimum required
#Got 17.0.0 for apples clang
#according to gpt this one works well with our version VERSION 3.16
cmake_minimum_required(VERSION 3.16)


#project name **Jerry Li**
project(ctorch_cpp)


#uses this version of cpp for all the files
set(CMAKE_CXX_STANDARD 23)


#use when you have headers in a /include 
include_directories(include)


#lets you downlaod external dependencies 
include(FetchContent)


#fetches Gtest when i run cmake 
FetchContent_Declare(
    googletest
    GIT_REPOSITORY https://github.com/google/googletest.git
    GIT_TAG v1.14.0
)

#tells it to download configure, and add the gtest project to my currcmake build 
FetchContent_MakeAvailable(googletest)


#enable testing 
enable_testing()


#finds all cpp files under src and stores them in SOURCE
file(GLOB_RECURSE SOURCES "src/*.cpp" "src/**/*.cpp")
#Remove anything that matches main.cpp from the SOURCES list.
list(FILTER SOURCES EXCLUDE REGEX ".*main\\.cpp$")


# Create a library that we can use in other projects
add_library(ctorch_core ${SOURCES})


#main executable 
add_executable(ctorch src/main.cpp)


#code from this library(ctorch_core) defined elsewhere will be compiled and linked into ctrch executable
#private means only ctorch knows about the core doesnt tell anything else using core 
target_link_libraries(ctorch PRIVATE ctorch_core)



# Tests

#collects cpp files in /tests and puts them into TEST_SOURCES variable
file(GLOB TEST_SOURCES "tests/*.cpp")
#creates executable to run tests
add_executable(run_tests ${TEST_SOURCES}) #executable to run tests
#runs test with ctorch core
target_link_libraries(run_tests PRIVATE ctorch_core gtest gtest_main)

# Register tests
#loads g test
include(GoogleTest)
#auto finds TEST() and TEST_F() in run tests 
gtest_discover_tests(run_tests)





#HOW TO RUN CMAKE

#run cmake .. while in the /build path
 #cmake configures our project, detects compiler, generates make file, checks system settings, 
 #c++ veresion, file paths and dependencies

#then run make 
 #reads makefile generated by cmake, then compiles .cpp into .o files. 
 # a .o file is a object file that is partially compiled file w/ machine code for a single source fle, but not linked 
 #Linker combines all .o files into an executable
 #links them to the executable, only rebuilds changed files 
